// Code generated by mockery v2.15.0. DO NOT EDIT.

package procio

import mock "github.com/stretchr/testify/mock"

// mockMemoryReaderImpl is an autogenerated mock type for the memoryReaderImpl type
type mockMemoryReaderImpl struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockMemoryReaderImpl) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Process provides a mock function with given fields:
func (_m *mockMemoryReaderImpl) Process() Process {
	ret := _m.Called()

	var r0 Process
	if rf, ok := ret.Get(0).(func() Process); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Process)
		}
	}

	return r0
}

// Read provides a mock function with given fields: p
func (_m *mockMemoryReaderImpl) Read(p []byte) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Seek provides a mock function with given fields: offset, whence
func (_m *mockMemoryReaderImpl) Seek(offset int64, whence int) (int64, error) {
	ret := _m.Called(offset, whence)

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64, int) int64); ok {
		r0 = rf(offset, whence)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(offset, whence)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Segment provides a mock function with given fields:
func (_m *mockMemoryReaderImpl) Segment() *MemorySegmentInfo {
	ret := _m.Called()

	var r0 *MemorySegmentInfo
	if rf, ok := ret.Get(0).(func() *MemorySegmentInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*MemorySegmentInfo)
		}
	}

	return r0
}

type mockConstructorTestingTnewMockMemoryReaderImpl interface {
	mock.TestingT
	Cleanup(func())
}

// newMockMemoryReaderImpl creates a new instance of mockMemoryReaderImpl. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockMemoryReaderImpl(t mockConstructorTestingTnewMockMemoryReaderImpl) *mockMemoryReaderImpl {
	mock := &mockMemoryReaderImpl{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
