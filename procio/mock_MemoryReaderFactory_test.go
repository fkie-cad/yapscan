// Code generated by mockery v2.12.2. DO NOT EDIT.

package procio

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// MockMemoryReaderFactory is an autogenerated mock type for the MemoryReaderFactory type
type MockMemoryReaderFactory struct {
	mock.Mock
}

// NewMemoryReader provides a mock function with given fields: proc, seg
func (_m *MockMemoryReaderFactory) NewMemoryReader(proc Process, seg *MemorySegmentInfo) (MemoryReader, error) {
	ret := _m.Called(proc, seg)

	var r0 MemoryReader
	if rf, ok := ret.Get(0).(func(Process, *MemorySegmentInfo) MemoryReader); ok {
		r0 = rf(proc, seg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MemoryReader)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Process, *MemorySegmentInfo) error); ok {
		r1 = rf(proc, seg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockMemoryReaderFactory creates a new instance of MockMemoryReaderFactory. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockMemoryReaderFactory(t testing.TB) *MockMemoryReaderFactory {
	mock := &MockMemoryReaderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
