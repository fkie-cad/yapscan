// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.0
// Revision: bc24b100a9e3ef3c4271209e99c6ac57597446f3
// Build Date: 2022-08-03T22:36:20Z
// Built By: goreleaser

package arch

import (
	"fmt"
	"strings"
)

const (
	// BitnessInvalid is a Bitness of type Invalid.
	BitnessInvalid Bitness = iota
	// Bitness32Bit is a Bitness of type 32Bit.
	Bitness32Bit Bitness = iota + 31
	// Bitness64Bit is a Bitness of type 64Bit.
	Bitness64Bit Bitness = iota + 62
)

const _BitnessName = "invalid32Bit64Bit"

var _BitnessNames = []string{
	_BitnessName[0:7],
	_BitnessName[7:12],
	_BitnessName[12:17],
}

// BitnessNames returns a list of possible string values of Bitness.
func BitnessNames() []string {
	tmp := make([]string, len(_BitnessNames))
	copy(tmp, _BitnessNames)
	return tmp
}

var _BitnessMap = map[Bitness]string{
	BitnessInvalid: _BitnessName[0:7],
	Bitness32Bit:   _BitnessName[7:12],
	Bitness64Bit:   _BitnessName[12:17],
}

// String implements the Stringer interface.
func (x Bitness) String() string {
	if str, ok := _BitnessMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Bitness(%d)", x)
}

var _BitnessValue = map[string]Bitness{
	_BitnessName[0:7]:                    BitnessInvalid,
	strings.ToLower(_BitnessName[0:7]):   BitnessInvalid,
	_BitnessName[7:12]:                   Bitness32Bit,
	strings.ToLower(_BitnessName[7:12]):  Bitness32Bit,
	_BitnessName[12:17]:                  Bitness64Bit,
	strings.ToLower(_BitnessName[12:17]): Bitness64Bit,
}

// ParseBitness attempts to convert a string to a Bitness.
func ParseBitness(name string) (Bitness, error) {
	if x, ok := _BitnessValue[name]; ok {
		return x, nil
	}
	return Bitness(0), fmt.Errorf("%s is not a valid Bitness, try [%s]", name, strings.Join(_BitnessNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x Bitness) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Bitness) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseBitness(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
