// Code generated by mockery v2.12.2. DO NOT EDIT.

package yapscan

import (
	procio "github.com/fkie-cad/yapscan/procio"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// mockProcess is an autogenerated mock type for the process type
type mockProcess struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *mockProcess) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Crash provides a mock function with given fields: _a0
func (_m *mockProcess) Crash(_a0 procio.CrashMethod) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(procio.CrashMethod) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Handle provides a mock function with given fields:
func (_m *mockProcess) Handle() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Info provides a mock function with given fields:
func (_m *mockProcess) Info() (*procio.ProcessInfo, error) {
	ret := _m.Called()

	var r0 *procio.ProcessInfo
	if rf, ok := ret.Get(0).(func() *procio.ProcessInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*procio.ProcessInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MemorySegments provides a mock function with given fields:
func (_m *mockProcess) MemorySegments() ([]*procio.MemorySegmentInfo, error) {
	ret := _m.Called()

	var r0 []*procio.MemorySegmentInfo
	if rf, ok := ret.Get(0).(func() []*procio.MemorySegmentInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*procio.MemorySegmentInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PID provides a mock function with given fields:
func (_m *mockProcess) PID() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Resume provides a mock function with given fields:
func (_m *mockProcess) Resume() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *mockProcess) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Suspend provides a mock function with given fields:
func (_m *mockProcess) Suspend() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockProcess creates a new instance of mockProcess. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func newMockProcess(t testing.TB) *mockProcess {
	mock := &mockProcess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
